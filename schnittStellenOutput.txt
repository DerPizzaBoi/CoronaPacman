Application.java
public class Application {
public static void main(String[] args) {
public Application(){


Controller.java
public class Controller implements ViewListener {
public Controller() {
public void pauseGame() {
public void continueGame() {
public class ActionUp extends AbstractAction {
public void actionPerformed(ActionEvent e) {
public class ActionDown extends AbstractAction {
public void actionPerformed(ActionEvent e) {
public class ActionLeft extends AbstractAction {
public void actionPerformed(ActionEvent e) {
public class ActionRight extends AbstractAction {
public void actionPerformed(ActionEvent e) {
public class ActionEnter extends AbstractAction {
public void actionPerformed(ActionEvent e) {
public void onNavigate(NavigationPanels destination, Bundle bundle) {


NavigationPanels.java
public enum NavigationPanels {


GameModelListener.java
public interface GameModelListener extends ModelListener{


ModelListener.java
public interface ModelListener {


Corona.java
public class Corona extends EntityModel {
public Corona(int x, int y, PlayerDirection startDir) {
public Corona(Coord chunkPos, PlayerDirection startDir) {
public Corona() {
public Corona(Coord chunkPos, PlayerDirection startDir, boolean isFirstImg) {
public Corona(int x, int y, PlayerDirection startDir, boolean isFirstImg) {
public void move() {
public void moveChunk() {
public void setCurrentDirection(PlayerDirection dir) {
public PlayerDirection getCurrentDirection() {
public Coord getCoords() {
public int getHeight() {
public int getWidth() {
public int getX() {
public int getY() {
public void setHeight(int height) {
public void setWidth(int width) {
public void setX(int x) {
public void setY(int y) {
public Image getImage(boolean s) {
/*    public void switchImage() {


EntityModel.java
public abstract class EntityModel {


Player.java
public class Player extends EntityModel {
public Player() {
public void move() {
public void moveChunk() {
public Coord getCoords() {
public int getHeight() {
public int getWidth() {
public int getX() {
public int getY() {
public void setHeight(int height) {
public void setWidth(int width) {
public void setX(int x) {
public void setY(int y) {
public PlayerDirection getCurrentDirection() {
public void setCurrentDirection(PlayerDirection currentDirection) {
public int getLives() {
public void setLives(int a) {
public Image getImg(boolean isSwitch) {


PlayerDirection.java
public enum PlayerDirection {


TPaper.java
public class TPaper {
public TPaper(){
public int getLength() {
public int getWidth() {
public int getX() {
public int getY() {
public void setLength(int length) {
public void setWidth(int width) {
public void setX(int x) {
public void setY(int y) {
public Image getImage() {


Vac.java
public class Vac {
public Vac(int x, int y){
public int getLength() {
public int getWidth() {
public int getX() {
public int getY() {
public void setLength(int length) {
public void setWidth(int width) {
public void setX(int x) {
public void setY(int y) {
public Image getImage() {


Model.java
public class Model {
public Model(StartModel startModel, GameModel gameModel, PauseModel pauseModel, EndModel endModel, CreditsModel creditsModel, RulesModel rulesModel) {
public StartModel getStartModel() {
public void setStartModel(StartModel startModel) {
public GameModel getGameModel() {
public void setGameModel(GameModel gameModel) {
public PauseModel getPauseModel() {
public void setPauseModel(PauseModel model) {
public EndModel getEndModel() {
public void setEndModel(EndModel endModel) {
public CreditsModel getCreditsModel() {
public void setCreditsModel(CreditsModel creditsModel) {
public RulesModel getRulesModel() {
public void setRulesModel(RulesModel rulesModel) {
public Player getPlayer() {


CreditsModel.java
public class CreditsModel {
public CreditsModel(){
public String getCreditslTXT() {


EndModel.java
public class EndModel {
public EndModel(){
public int getScore(){
public void setScore(int a){score = a;}


GameModel.java
public class GameModel extends PanelModel {
public GameModel() {
public void setGameModelListener(GameModelListener gl) {
public boolean doesNotCollidePlayer(PlayerDirection dir) {
public boolean doesNotCollideCorona(Corona c) {
public void gameTick(int tick) {
public void run() {
public void turnPlayer(PlayerDirection dir) {
public int getCoronaCount() {
public ArrayList<Corona> getCovList(){
public Player getPlayer() {
public int getScore() {
public int getFps() {
public void setFps(int fps) {
public Image getMapImage() {
public boolean getCoronaAnimationState() {
public boolean getPlayerAnimationState() {
public HashMap<Coord, MapChunkValues> getGameMap() {
public Vac[] getVacs() {
public TPaper getTPaper() {


PanelModel.java
public abstract class PanelModel {


PauseModel.java
public class PauseModel {


RulesModel.java
public class RulesModel {
public RulesModel(){
public String getRuleslTXT(){


StartModel.java
public class StartModel {
public StartModel(){                                        //---Aspect Ratio = 1/1.41402942955---
public Image getBackgroundImg() {


ViewListener.java
public interface ViewListener {


CreditsPanel.java
public class CreditsPanel extends PanelView{
public CreditsPanel(CreditsModel model, ViewListener viewListener){
public void actionPerformed(ActionEvent e) {


EndPanel.java
public class EndPanel extends PanelView {
public EndPanel(EndModel model, ViewListener viewListener, Bundle bundle) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {


GamePanel.java
public class GamePanel extends PanelView implements GameModelListener {
public static final String KEY_SCORE = "game_panel";
public GamePanel(GameModel model, ViewListener viewListener) {//
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void onFpsChanged(int fps) {
public void onScoreChanged(int score) {
public void finishGame(int score) {
public void update() {


PanelView.java
public abstract class PanelView extends JPanel implements ModelListener {


PausePanel.java
public class PausePanel extends PanelView {
public PausePanel(PauseModel model){


RulesPanel.java
public class RulesPanel extends PanelView{
public RulesPanel (RulesModel model, ViewListener viewListener){
public void actionPerformed(ActionEvent e) {


StartPanel.java
public class StartPanel extends PanelView {
public StartPanel(StartModel model, ViewListener viewListener) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void actionPerformed(ActionEvent e) {
public void addGB(Component component, int x, int y) {
public void finishGame(int score){ }


View.java
public class View implements ModelListener {
public View(Model model, ViewListener viewListener) {
public void onNavigate(NavigationPanels destination, Bundle bundle) {
public void onNavigate(NavigationPanels destination) {
public StartPanel getStartPanel() {
public GamePanel getGamePanel() {
public PausePanel getPausePanel() {
public EndPanel getEndPanel() {
public CreditsPanel getCreditsPanel() {
public RulesPanel getRulesPanel() {
public void setStartPanel(StartPanel panel){


Bundle.java
public class Bundle {
public Bundle() {
public static Bundle emptyBundle(){
public Bundle put(String key, Object obj) {
public <T> T get(String key) {
public int getSize() {
public void clear(){


Coord.java
public class Coord {
public Coord(int x, int y) {
public int hashCode() {
public boolean equals(Object obj) {
public int getX() {
public int getY() {
public void setX(int x) {
public void setY(int y) {


Data.java
public class Data {
public static Image loadImageFromRes(String path) {
public static File loadFileFromRes(String filename) {
public static Font setPacFont() {
public final static int MAP_CHUNK_SIZE = 323;
public static HashMap<Coord, MapChunkValues> getGameHashMap() {


Dimensions.java
public class Dimensions {
public static final int MAP_WIDTH = 17;
public static final int MAP_HEIGHT = 20;
public static final Pair<Integer, Integer> MAP_DIMENSION = new Pair<>(MAP_WIDTH, MAP_HEIGHT);
public static final int PIXEL_PER_CHUNK_X = 45;
public static final int PIXEL_PER_CHUNK_Y = 49;
public static final int TICKS_PER_CHUNK_X = 47;
public static final int TICKS_PER_CHUNK_Y = 53;
public static final int TICKS_PER_ANIMATION_SWITCH = 30;
public static final int TICKS_PER_PLAYER_ANIMATION_SWITCH = 15;
public static final int MAP_OFFSET_X = 33;
public static final int MAP_OFFSET_Y = 50;
public static Pair<Integer, Integer> getScreenResolution() {


MapChunkValues.java
public class MapChunkValues {
public MapChunkValues(boolean hasDot, boolean hasToiletPaper, boolean hasVac, boolean hasCorona, PlayerMovableDir playerMovableDir) {
public boolean isHasDot() {
public MapChunkValues setHasDot(boolean hasDot) {
public boolean isHasToiletPaper() {
public void setHasToiletPaper(boolean hasToiletPaper) {
public boolean isHasVac() {
public void setHasVac(boolean hasVac) {
public boolean isHasCorona() {
public void setHasCorona(boolean hasCorona) {
public PlayerMovableDir getPlayerMovableDir() {
public void setPlayerMovableDir(PlayerMovableDir playerMovableDir) {


Pair.java
public class Pair<K, V> {
public Pair(K key, V value) {
public K getKey() {
public void setKey(K key) {
public V getValue() {
public void setValue(V value) {


PlayerMovableDir.java
public class PlayerMovableDir {
public PlayerMovableDir(boolean up, boolean down, boolean left, boolean right) {
public boolean isUp() {
public boolean isDown() {
public boolean isLeft() {
public boolean isRight() {


Util.java
public class Util {


WAVPlayer.java
public class WAVPlayer {
public static void playGameMusic() {
public static void killThread() {
public static void pauseMusic() {
public static void continueMusic() {


